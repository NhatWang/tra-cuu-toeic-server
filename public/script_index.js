const tips = [
  "üîÑ Ch√†o b·∫°n! H·ªá th·ªëng ƒëang kh·ªüi ƒë·ªông...",
  "ƒêang t·∫£i d·ªØ li·ªáu...",
  "H·ªá th·ªëng ƒëang kh·ªüi ƒë·ªông...",
  "Chu·∫©n b·ªã s·∫µn s√†ng tra c·ª©u ƒëi·ªÉm...",
  "G·∫ßn xong r·ªìi, c·∫£m ∆°n b·∫°n ƒë√£ ƒë·ª£i!"
];

window.addEventListener("load", function () {
  const overlay = document.getElementById("loadingOverlay");
  if (overlay) {
    setTimeout(() => {
      overlay.style.display = "none";
    }, 10000);
  }

  const container = document.querySelector(".container");
  const logoContainer = document.querySelector(".logo-container");

  if (container) container.classList.add("fade-in");
  if (logoContainer) logoContainer.classList.add("slide-in");
});

let index = 0;
  const text = document.querySelector(".loading-text");
  if (text) {
    text.textContent = tips[0];
    setInterval(() => {
      index = (index + 1) % tips.length;
      text.textContent = tips[index];
    }, 2000);
  }

let traCuuKetQua = null;

// H√†m ch√≠nh ƒë·ªÉ tra c·ª©u ƒëi·ªÉm
function traCuuDiem() {
  const sbd = document.getElementById("sbd").value.trim();
  const msv = document.getElementById("msv").value.trim();

  if (!sbd || !msv) {
    openModal(`<p class="fail">‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß SBD v√† MSSV</p>`);
    return;
  }

  fetch("/api/tra-cuu", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ sbd, msv }),
  })
    .then((res) => res.json())
    .then((data) => {
      console.log("‚úÖ D·ªØ li·ªáu API:", data)
      if (data.success) {
        const { ten,
                diem,
                msv, 
                sbd, 
                xepHang, 
                tongSoNguoi,
                fileGiayChungNhan
               } = data.data;

        let thongBao = "";
        let diemHienThi = "V·∫Øng";
        let hangXep = "";

        // ‚úÖ Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ ƒëi·ªÉm
        if (typeof diem === "number" && !isNaN(diem)) {
          diemHienThi = diem;
          if (diem >= 450) {
            thongBao = `<p class="success">‚úÖ ƒê·ªß ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c c·∫•p gi·∫•y ch·ª©ng nh·∫≠n</p>`;
          
            // ‚úÖ Th√™m n√∫t n·∫øu c√≥ file nh·∫≠n v·ªÅ t·ª´ API
            if (fileGiayChungNhan) {
              thongBao += `
                <div class="btn-cert-wrapper">
                  <a href="${fileGiayChungNhan}" target="_blank" class="btn-cert">
                    üéì Xem Gi·∫•y Ch·ª©ng Nh·∫≠n
                  </a>
                  <button onclick="openRegisterModal()" class="btn-cert" style="background-color: #ffc107; margin-left: 12px;">
                    ‚úâÔ∏è Nh·∫≠n b·∫£n c·ª©ng
                  </button>
                </div>
              `;
            } else {
              // ƒê·ªÉ debug n·∫øu kh√¥ng th·∫•y file:
              console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y fileGiayChungNhan cho SBD:", sbd);
            }
          
            // Confetti üéâ
            confetti({
              particleCount: 100,
              spread: 150,
              origin: { y: 0.6 }
            });
          } else {
            thongBao = `<p class="fail">üìò B·∫°n h√£y c·ªë g·∫Øng √¥n t·∫≠p nh√©!</p>`;
          }

          // ‚úÖ Ch·ªâ hi·ªÉn th·ªã x·∫øp h·∫°ng n·∫øu c√≥ ƒëi·ªÉm
          hangXep = `<p><strong>X·∫øp h·∫°ng:</strong> ${xepHang} / ${tongSoNguoi}</p>`;
        }

        // ‚úÖ Hi·ªÉn th·ªã k·∫øt qu·∫£ trong modal
        openModal(`
          <p><strong>H·ªç v√† t√™n:</strong> ${ten}</p>
          <p><strong>M√£ s·ªë sinh vi√™n:</strong> ${msv}</p>
          <p><strong>S·ªë b√°o danh:</strong> ${sbd}</p>
          <p><strong>ƒêi·ªÉm:</strong> ${diemHienThi}</p> 
          ${hangXep}
          ${thongBao}
        `);

        traCuuKetQua = { ten, msv }; // ‚úÖ L∆∞u th√¥ng tin ƒë·ªÉ so s√°nh khi ƒëƒÉng k√Ω

      } else {
        openModal(`<p class="fail">${data.message}</p>`);
      }
    })
    .catch((err) => {
      console.error("L·ªói khi g·ªçi API:", err);
      openModal(`<p class="fail">ƒê√£ x·∫£y ra l·ªói khi tra c·ª©u.</p>`);
    });
}

// H√†m m·ªü modal
function openModal(noiDungHTML) {
  const modal = document.getElementById("modalKetQua");
  const modalBody = document.getElementById("modalBody");
  modalBody.innerHTML = noiDungHTML;
  modal.style.display = "flex";
}

// H√†m ƒë√≥ng modal
function closeModal() {
  const modal = document.getElementById("modalKetQua");
  if (modal) {
    modal.style.display = "none";
  }
}

// ƒê√≥ng modal khi click ra ngo√†i
window.addEventListener("click", function (event) {
  const modal = document.getElementById("modalKetQua");
  if (event.target === modal) {
    modal.style.display = "none";
  }
});

document.addEventListener("DOMContentLoaded", function () {
  // 1. X·ª≠ l√Ω nh·∫•n Enter
  const sbdInput = document.getElementById("sbd");
  const msvInput = document.getElementById("msv");

  const msvTraCuuInput = document.getElementById("msvTraCuuTrangThai");
  const fullNameInput = document.getElementById("fullNameTraCuuTrangThai");
  const lopInput = document.getElementById("input[name='lop']");

function handleEnterKey(e, callback) {
    if (e.key === "Enter") {
      e.preventDefault(); // NgƒÉn h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa ph√≠m Enter
      callback(); // G·ªçi h√†m callback ƒë∆∞·ª£c truy·ªÅn v√†o
    }
  }

  [fullNameInput, msvInput, lopInput].forEach((input) => {
    if (input) {
      input.addEventListener("keypress", (e) => {
        handleEnterKey(e, () => {
          console.log("Nh·∫•n Enter trong modal ƒëƒÉng k√Ω");
      });
    });
    }
    });

    if (msvTraCuuInput) {
      msvTraCuuInput.addEventListener("keypress", (e) => {
        handleEnterKey(e, () => {
          console.log("Nh·∫•n Enter trong modal tra c·ª©u tr·∫°ng th√°i ƒë∆°n");
          traCuuTrangThaiDon();
        });
      });
    }

  [sbdInput, msvInput].forEach((input) => {
    input.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        e.preventDefault();
        traCuuDiem();
      }
    });
  });
// ======================= KHI T·∫¢I XONG TRANG =========================


// M·ªü modal ƒëƒÉng k√Ω
function openRegisterModal() {
  const modal = document.getElementById("modalRegister");
  if (modal) {
    modal.style.display = "block";
  }
}
// ƒê√≥ng modal ƒëƒÉng k√Ω
function closeRegisterModal() {
  const modal = document.getElementById("modalRegister");
  if (modal) {
    modal.style.display = "none";
  }
}
// ======= FORM ƒêƒÇNG K√ù NH·∫¨N B·∫¢N C·ª®NG =======
// L·∫Øng nghe khi DOM ƒë√£ t·∫£i xong
document.addEventListener("DOMContentLoaded", function () {
  const form = document.getElementById("registerForm");
  const messageDiv = document.getElementById("registerMessage");
  if (!form) return;

  form.addEventListener("submit", function (e) {
    e.preventDefault(); // ‚úÖ NgƒÉn form h√†nh x·ª≠ m·∫∑c ƒë·ªãnh

    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

// ‚úÖ So s√°nh th√¥ng tin v·ªõi k·∫øt qu·∫£ tra c·ª©u
if (!traCuuKetQua) {
showToast("‚ö†Ô∏è Vui l√≤ng tra c·ª©u ƒëi·ªÉm tr∆∞·ªõc khi ƒëƒÉng k√Ω!", "error");
return;
}

function normalize(str) {
  return (str || "")
    .normalize("NFC") // Ho·∫∑c "NFD"
    .replace(/\s+/g, " ") // b·ªè kho·∫£ng tr·∫Øng d∆∞
    .trim()
    .toLowerCase();
}

const tenForm = normalize(data.fullName);
const msvForm = normalize(data.msv);
const tenTraCuu = normalize(traCuuKetQua.ten);
const msvTraCuu = normalize(traCuuKetQua.msv);

if (tenForm !== tenTraCuu || msvForm !== msvTraCuu) {
  showToast("‚ùå H·ªç t√™n ho·∫∑c MSSV kh√¥ng kh·ªõp v·ªõi k·∫øt qu·∫£ tra c·ª©u!", "error");
  return;
}

// Ti·∫øp t·ª•c g·ª≠i n·∫øu ƒë√∫ng
const btn = form.querySelector('button[type="submit"]');
btn.disabled = true;
btn.textContent = "ƒêang g·ª≠i...";

fetch("/register-certificate", {
method: "POST",
headers: { "Content-Type": "application/json" },
body: JSON.stringify(data)
})
.then(res => res.text())
.then(message => {
  if(message.includes("‚ùå B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n gi·∫•y ch·ª©ng nh·∫≠n b·∫£n c·ª©ng tr∆∞·ªõc ƒë√≥.")) {
    showToast("‚ùå B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n gi·∫•y ch·ª©ng nh·∫≠n b·∫£n c·ª©ng tr∆∞·ªõc ƒë√≥.", "error"); 

  } else {
    showToast("‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω!", "success");
  }

btn.disabled = false;
btn.textContent = "G·ª≠i ƒëƒÉng k√Ω";

setTimeout(() => {
messageDiv.innerHTML = "";
closeRegisterModal();
}, 1500);
})
.catch(err => {
console.error("‚ùå L·ªói g·ª≠i form:", err);
showToast("‚ùå G·ª≠i th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!", "error");
btn.disabled = false;
btn.textContent = "G·ª≠i ƒëƒÉng k√Ω";
});
});
})

function showToast(message, type = "success") {
  const container = document.getElementById("toast-container");

  const toast = document.createElement("div");
  toast.className = `toast ${type === "error" ? "error" : ""}`;
  toast.textContent = message;

  container.appendChild(toast);

   // Sau 3s, th√™m class .exit ƒë·ªÉ tr∆∞·ª£t ra ph·∫£i
  setTimeout(() => {
    toast.classList.add("exit");
  }, 3000);

  // Sau 2s, xo√° kh·ªèi DOM
  setTimeout(() => {
    toast.remove();
  }, 2000);
}
// ======================= TRA C·ª®U TR·∫†NG TH√ÅI ƒê∆†N =========================
// H√†m m·ªü modal tra c·ª©u tr·∫°ng th√°i ƒë∆°n
document.addEventListener("DOMContentLoaded", function () {
  document.getElementById("btnTraCuuTrangThai")?.addEventListener("click", traCuuTrangThaiDon);
});
  function openStatusModal() {
    const modal = document.getElementById("modalTraCuuTrangThai");
    if (modal) {
      modal.style.display = "flex";
      document.body.style.overflow = "hidden";
    }
  }
  
  function closeStatusModal() {
    const modal = document.getElementById("modalTraCuuTrangThai");
    if (modal) {
      modal.style.display = "none";
      document.body.style.overflow = "";
    }
  }

  function hienThiTrangThai(status) {
    const dict = {
      dang_xu_ly: {
        icon: "‚è≥",
        text: "ƒêang x·ª≠ l√Ω",
        color: "#ffc107"
      },
      cho_ky: {
        icon: "üñã",
        text: "Ch·ªù k√Ω",
        color: "#fd7e14"
      },
      da_ky: {
        icon: "‚úÖ",
        text: "ƒê√£ k√Ω xong",
        color: "#28a745"
      },
      dang_van_chuyen: {
        icon: "üöö",
        text: "ƒêang v·∫≠n chuy·ªÉn",
        color: "#17a2b8"
      },
      san_sang_nhan: {
        icon: "üì¶",
        text: "S·∫µn s√†ng nh·∫≠n",
        color: "#007bff"
      },
      da_nhan: {
        icon: "üì¨",
        text: "ƒê√£ nh·∫≠n",
        color: "#20c997"
      }
    };

    const item = dict[status];
    if (!item) return `<span style="color:red;">Kh√¥ng r√µ tr·∫°ng th√°i</span>`;
    return `<span style="color:${item.color}; font-weight:bold;">${item.icon} ${item.text}</span>`;
  }
  
  function traCuuTrangThaiDon() {
    const msv = document.getElementById("msvTraCuuTrangThai")?.value.trim();
  
    if (!msv) {
      showToast("‚ùóVui l√≤ng nh·∫≠p MSSV", "error");
      return;
    }
  
    openModal(`
      <p style="color:#666;">‚è≥ ƒêang ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n...</p>
      <div class="spinner" style="margin-top:10px;"></div>
    `);
  
    fetch("/api/trang-thai-don", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ msv })
    })
      .then(res => res.json())
      .then(data => {
        if (!data.success || !data.status) {
          openModal(`<p class="fail">‚ùå ${data.message || "Kh√¥ng t√¨m th·∫•y ƒë∆°n."}</p>`);
          return;
        }
        const { fullName, lop, taodon, capnhat} = data;
        const trangThai = hienThiTrangThai(data.status);
        let formattedDate = "Ch∆∞a ch·ªçn";
        let selectedHours = "";
        let selectedMinutes = "";
  
        const showDateTimeInputs = data.status === "san_sang_nhan";
        const datePickerHTML = showDateTimeInputs
          ? `<p><strong>Ch·ªçn ng√†y giao:</strong></p>
             <input type="date" id="timeGiao">`
          : "";
        const timePickerHTML = showDateTimeInputs
          ? `<p><strong>Ch·ªçn th·ªùi gian giao:</strong></p>
             <input type="time" id="timepicker" min="09:00" max="16:00" step="1800">`
          : "";
        const saveButtonHTML = showDateTimeInputs
          ? `<button id="saveButton" class="btn btn-primary">L∆∞u th·ªùi gian nh·∫≠n</button>`
          : "";
  
        openModal(`
          <p><strong>H·ªç v√† t√™n:</strong> ${fullName}</p>
          <p><strong>M√£ s·ªë sinh vi√™n:</strong> ${msv}</p>
          <p><strong>L·ªõp:</strong> ${lop}</p>
          <p><strong>Th·ªùi gian t·∫°o ƒë∆°n:</strong> ${taodon}</p>
          <p><strong>Th·ªùi gian c·∫≠p nh·∫≠t:</strong> ${capnhat}</p>
          <p><strong>Tr·∫°ng th√°i:</strong> ${trangThai}</p>
          ${datePickerHTML}
          ${timePickerHTML}
          <p id="timeGiaoDisplay"><strong>Th·ªùi gian nh·∫≠n ƒë√£ ch·ªçn:</strong> ${formattedDate} ${selectedHours}</p>
          ${saveButtonHTML}
        `);
  
        const timeGiaoInput = document.getElementById("timeGiao");
        if (timeGiaoInput) {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 1);
          const minDate = tomorrow.toISOString().split("T")[0];
          timeGiaoInput.min = minDate;
  
          timeGiaoInput.addEventListener("change", function () {
            const val = this.value;
            if (!val) return;
            if (ngayLeVN.includes(val)) {
              showToast("‚ùå ƒê√¢y l√† ng√†y l·ªÖ, vui l√≤ng ch·ªçn ng√†y kh√°c.", "error");
              this.value = "";
              return;
            }
  
            const [year, month, day] = val.split("-");
            formattedDate = `${day}/${month}/${year}`;
  
            const selectedDate = new Date(val);
            const dow = selectedDate.getDay();
            if (dow === 0 || dow === 6) {
              showToast("‚ùå Vui l√≤ng ch·ªçn c√°c ng√†y t·ª´ th·ª© 2 ƒë·∫øn th·ª© 6.", "error");
              this.value = "";
              return;
            }
  
            const display = document.getElementById("timeGiaoDisplay");
            if (display) {
              display.textContent = `Th·ªùi gian nh·∫≠n ƒë√£ ch·ªçn: ${selectedHours}:${selectedMinutes} ${formattedDate}`;
            }
          });
        }
  
        const timePicker = document.getElementById("timepicker");
        if (timePicker) {
          timePicker.addEventListener("change", () => {
            const selectedTime = timePicker.value;
  
            if (!selectedTime || !selectedTime.includes(":")) {
              showToast("‚ùå Th·ªùi gian kh√¥ng h·ª£p l·ªá.", "error");
              return;
            }
  
            let [hours, minutes] = selectedTime.split(":").map(Number);
            if (isNaN(hours) || isNaN(minutes)) return;
  
            if (minutes < 15) {
              minutes = 0;
            } else if (minutes < 45) {
              minutes = 30;
            } else {
              minutes = 0;
              hours += 1;
            }
  
            if (hours < 9) {
              showToast("‚ùå Ch·ªçn trong gi·ªù h√†nh ch√≠nh (9:00 - 16:00)", "error");
              hours = 9;
              minutes = 0;
            } else if (hours > 16) {
              showToast("‚ùå Ch·ªçn trong gi·ªù h√†nh ch√≠nh (9:00 - 16:00)", "error");
              hours = 16;
              minutes = 0;
            }
  
            selectedHours = hours.toString().padStart(2, "0");
            selectedMinutes = minutes.toString().padStart(2, "0");
            timePicker.value = `${selectedHours}:${selectedMinutes}`;
  
            const display = document.getElementById("timeGiaoDisplay");
            if (display) {
              display.textContent = `Th·ªùi gian nh·∫≠n ƒë√£ ch·ªçn: ${selectedHours}:${selectedMinutes} ${formattedDate}`;
            }
          });
        }
  
        const saveButton = document.getElementById("saveButton");
        if (saveButton) {
          saveButton.addEventListener("click", function () {
            const selectedDate = timeGiaoInput?.value || "";
            const selectedTime = timePicker?.value || "";
  
            if (!selectedDate || !selectedTime) {
              showToast("‚ùó Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ng√†y v√† gi·ªù nh·∫≠n.", "error");
              return;
            }
  
            const combinedDateTime = `${selectedTime} ${selectedDate}`;
  
            fetch("/api/cap-nhat-ngay-va-gio", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                msv: msv,
                date: combinedDateTime
              })
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.success) {
                  showToast(data.message ||"‚úÖ Th·ªùi gian nh·∫≠n ƒë√£ ƒë∆∞·ª£c l∆∞u!", "success");
                  saveButton.disabled = true;
                  timeGiaoInput.disabled = true;
                  timePicker.disabled = true;

                    setTimeout(closeStatusModal, 1500);
                  } else {
                    // ‚úÖ N·∫øu ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥ v√† c√≥ gi·ªù/ng√†y
                    if (data.selectedDate && data.selectedTime) {
                      const [year, month, day] = data.selectedDate.split("-");
                      const formattedDate = `${day}/${month}/${year}`;
                      const formattedTime = data.selectedTime;
                      openModal(`
                        <p class="fail">B·∫°n ƒë√£ ch·ªçn th·ªùi gian nh·∫≠n <strong>${formattedTime}</strong> ng√†y <strong>${formattedDate}</strong> tr∆∞·ªõc ƒë√≥.</p>
                        <p>Vui l√≤ng li√™n h·ªá <strong>email</strong> ho·∫∑c <strong>fanpage Li√™n chi H·ªôi Khoa H√≥a h·ªçc</strong> ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ thay ƒë·ªïi.</p>
                      `);
                    } else {
                      openModal(`<p class="fail">${data.message || "‚ùå C√≥ l·ªói x·∫£y ra."}</p>`);
                    }
                  }
                })
              .catch((err) => {
                console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu:", err);
                showToast("‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i d·ªØ li·ªáu.", "error");
              });
          });
        }
      })
      .catch(err => {
        console.error("L·ªói tra tr·∫°ng th√°i:", err);
        openModal(`<p class="fail">‚ùå L·ªói khi ki·ªÉm tra ƒë∆°n.</p>`);
      });
  }
    const ngayLeVN = [
      "2025-01-01",
      "2025-01-28", "2025-01-29", "2025-01-30", "2025-01-31",
      "2025-02-01", "2025-02-02", "2025-02-03",
      "2025-04-08",
      "2025-04-30",
      "2025-05-01",
      "2025-09-02"
    ];
  });